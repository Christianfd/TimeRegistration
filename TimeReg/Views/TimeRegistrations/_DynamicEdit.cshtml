@model TimeReg.ViewModels.TimeRegistrationViewModel

@{
    ViewBag.Title = "Edit";
}
<h2>Edit</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>TimeRegistration</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.PK_Id)

        <div class="form-group">
            @Html.LabelFor(model => model.FK_UserId, "FK_UserId", htmlAttributes: new { @class = "col-form-label col-md-2 " })
            <div class="col-md-10 ui-widget">
                @Html.DropDownList("FK_UserId", null, htmlAttributes: new { @class = "form-control selectpicker" })
                @Html.ValidationMessageFor(model => model.FK_UserId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FK_OrderId, "Order Number", htmlAttributes: new { @class = "col-form-label col-md-2" })
            <div class="col-md-10 ui-widget">
                @Html.DropDownList("FK_OrderId", null, htmlAttributes: new { @class = "form-control selectpicker" })
                @Html.ValidationMessageFor(model => model.FK_OrderId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FK_ProjectId, "FK_ProjectId", htmlAttributes: new { @class = "col-form-label col-md-2" })
            <div class="col-md-10 ui-widget">
                @Html.DropDownList("FK_ProjectId", null, htmlAttributes: new { @class = "form-control selectpicker" })
                @Html.ValidationMessageFor(model => model.FK_ProjectId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FK_TaskId, "FK_TaskId", htmlAttributes: new { @class = "col-form-label col-md-2" })
            <div class="col-md-10 ui-widget">
                @Html.DropDownList("FK_TaskId", null, htmlAttributes: new { @class = "form-control selectpicker" })
                @Html.ValidationMessageFor(model => model.FK_TaskId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Time, htmlAttributes: new { @class = "col-form-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Time, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "col-form-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control datepicker", autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Comment, "Comment", htmlAttributes: new { @class = "col-form-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </div>


    </div>
}

<a href="javascript:void()" class="Details" data-DynamicId="@Html.DisplayFor(model => model.PK_Id)">Details</a> <span> | </span>
<a href="javascript:void()" class="Delete" data-DynamicId="@Html.DisplayFor(model => model.PK_Id)">Delete</a>


@*OrderNumber trim to "Number Handling"*@
<script>
        function OrderNumberSplit(text) {
            var splitText = text.split(" :: ", 1)[0];
            var trimText = $.trim(splitText);
            return trimText;

        }
</script>


<script>
    $(".datepicker").datepicker({ dateFormat: 'dd/M/yy' }).val();
    $(".selectpicker").chosen();

    //Clipboard functionality
    function fallbackCopyTextToClipboard(text) {
        var textArea = document.createElement("textarea");
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        try {
            var successful = document.execCommand("copy");
            var msg = successful ? "successful" : "unsuccessful";
            console.log("Fallback: Copying text command was " + msg);
        } catch (err) {
            console.error("Fallback: Oops, unable to copy", err);
        }

        document.body.removeChild(textArea);
    }

    //Copies to Clipboard
    function copyTextToClipboard(text) {
        if (!navigator.clipboard) {
            fallbackCopyTextToClipboard(text);
            return;
        }
        navigator.clipboard.writeText(text).then(
          function () {
              console.log("Async: Copying to clipboard was successful!");
          },
          function (err) {
              console.error("Async: Could not copy text: ", err);
          }
        );
    }

    //Selects the copy button
    var copyOrderBtn = document.querySelector("#btnScore");

    //Triggers Copy to clipboard on button click
    copyOrderBtn.addEventListener("click", function (event) {
        var OrderNumberText = $("[id*='FK_OrderId'] :selected").text();
        //split and trims the value first
        OrderNumberText = OrderNumberSplit(OrderNumberText);
        //Clipboard Functionality
        copyTextToClipboard(OrderNumberText);
    });
</script>

@*Auto Completion Script -- Use Class "selectpicker" on dropdowns*@



@*Ajax and Json Handling*@
<script>

    @*$("custom-combobox-input").select();

        function DropDown_IndexChange(id) {
            if (id != null) {
                id = id.replace("combobox", "");
                var key = $("#" + id + " option:selected").val();
                var target = $("");
                //Based on the calling Id, we need to identify the dropdownlist in need of change:
                if (id == "FK_UserId")  {target = $("#FK_OrderId")  }
                if (id == "FK_OrderId") {target = $("#FK_ProjectId")}
            } else {return}



            function populateDropDownList(result) {
                //empty the targeted dropdownlist
                target.empty();
                //add the found results
                $.each(result, function (index, value) {
                    target.append($('<option/>', {
                        value: value.Value,
                        text: value.Text
                    }));
                    return;
                });
             }


            //Ajax Call is currently only needed When Chosing user or Order Number
            if (id == 'FK_UserId' || id == 'FK_OrderId') {
                $.getJSON('@Url.Action("AjaxDyanimcDropDown")', { dropDownKey: key, dropDownId: id }, function (result) {
                    if (result != null) {

                        console.log(result);

                        populateDropDownList(result, target);
                    };
                });
            }


          console.log("The id trigger was    : " + id);
          console.log("Corresponding value is: " + key);
          console.log("The DropDown Target is: " + target.attr('id'));



        };*@
</script>