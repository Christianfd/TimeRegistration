@model TimeReg.ViewModels.TimeRegistrationViewModel

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    <a class="Create">Create New</a>
</p>


<div id="PartialViewTableWrapper"> Loading TimeRegistrations..</div>

<!-- Modal -->
<div class="modal" id="PartialViewModal" tabindex="-1" role="dialog" aria-labelledby="PartialViewModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="PartialViewModalTitle">Rep It Project And Order Tools</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="PartialViewModalBody">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" data-CRUD="" id="PartialViewModalSaveButton" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jquery")
    <script src="~/Scripts/bootstrap.js"></script>

    @*Ajax table handling

        In the following JS the variable "CRUD" represents the type of action requested eg: Create, Remove, Update, Details.
    *@
    <script>
        $(document).ready(function () {
            UpdateDynamicTable();
        });


        function UpdateDynamicTable() {
            $.ajax({
                url: "/TimeRegistrations/IndexTable",
                type: "GET"
            }).done(function (partialViewResult) {
                $("#PartialViewTableWrapper").html(partialViewResult);
            })
        }

    </script>





@*Ajax Handling for the modal on the Edit page - and a bit other stuff*@
<script>


       //The click handler for trigering the partialViewHandler. For the Create New, Edit | Details | Delete.
        $(document).on('click', '.Create', function () {
            PartialViewHandler($(this), "Create");
        });

        $(document).on('click', '.Edit', function () {
            PartialViewHandler($(this), "Edit");
        });

        $(document).on('click', '.Details', function () {
            PartialViewHandler($(this), "Details");
        });

        $(document).on('click', '.Delete', function () {
            PartialViewHandler($(this), "Delete");
        });


        //Partial View Handler, gets the correct information from the "links" clicked. Split due to the Dynamic tables
        function PartialViewHandler(object, CRUD) {
            var DynamicOriginElement = object;
            var DynamicOriginId = DynamicOriginElement.data("dynamicid");
            AjaxDynamicHandler(CRUD, DynamicOriginId);
        }


        //Handles the AJAX call to return a partial View. The Switch is used to get the correct partial view and then enters it into the modal. Editing the content just enough for it to be ready for the stored procedure part
        function AjaxDynamicHandler(CRUD, DynamicOriginId) {
            var DynamicPK_Id = DynamicOriginId;
            console.log(DynamicOriginId);
            switch (CRUD) {
                case "Create":
                    $.ajax({
                        url: "/TimeRegistrations/DynamicCreate"
                    }).done(function (partialViewResult) {
                        $("#PartialViewModal").modal('show');
                        $("#PartialViewModalTitle").text("Rep It -  " + CRUD);
                        $("#PartialViewModalSaveButton").data("crud", CRUD);
                        $("#PartialViewModalSaveButton").text("Create");
                        $("#PartialViewModalBody").html(partialViewResult);
                    });
                    break;
                case "Edit":
                    $.ajax({
                        url: "/TimeRegistrations/DynamicEdit",
                        type: "GET",
                        data: { CRUD: CRUD, PK_Id: DynamicPK_Id }
                    }).done(function (partialViewResult) {
                        $("#PartialViewModal").modal('show');
                        $("#PartialViewModalTitle").text("Rep It -  " + CRUD);
                        $("#PartialViewModalSaveButton").data({crud: CRUD});
                        $("#PartialViewModalSaveButton").text("Save Changes");
                        $("#PartialViewModalBody").html(partialViewResult);

                    });
                    break;
                case "Details":
                    $.ajax({
                        url: "/TimeRegistrations/DynamicDetails",
                        type: "GET",
                        data: { CRUD: CRUD, PK_Id: DynamicPK_Id }
                    }).done(function (partialViewResult) {
                        $("#PartialViewModal").modal('show');
                        $("#PartialViewModalTitle").text("Rep It -  " + CRUD);
                        $("#PartialViewModalSaveButton").data("crud", CRUD);
                        $("#PartialViewModalSaveButton").text("Close");
                        $("#PartialViewModalBody").html(partialViewResult);
                    });
                    break;

                case "Delete":
                    $.ajax({
                        url: "/TimeRegistrations/DynamicDelete",
                        type: "GET",
                        data: { CRUD: CRUD, PK_Id: DynamicPK_Id }
                    }).done(function (partialViewResult) {
                        $("#PartialViewModal").modal('show');
                        $("#PartialViewModalTitle").text("Rep It -  " + CRUD);
                        $("#PartialViewModalSaveButton").data("crud", CRUD)
                        $("#PartialViewModalSaveButton").text("Delete");
                        $("#PartialViewModalBody").html(partialViewResult);
                    });
                    break;

                default:
                    $.ajax({
                        url: "/TimeRegistrations/DynamicEdit",
                        type: "GET",
                        data: { CRUD: CRUD,  PK_Id: DynamicPK_Id }
                    }).done(function (partialViewResult) {
                        $("#PartialViewModal").modal('show');
                        $("#PartialViewModalTitle").text("Rep It -  " + CRUD);
                        $("#PartialViewModalSaveButton").data("crud", CRUD)
                        $("#PartialViewModalBody").html(partialViewResult);
                    });
                    break;
            }


        }
</script>


@*This section handles the AJAX calls for stored procedures*@
<script>


        $("#PartialViewModalSaveButton").click(function () {
            var CRUD = $(this).data("crud");
            var form = $("#PartialViewModalBody").children('form');
            console.log(form.serialize());
            switch (CRUD) {
                case "Create":
                    $.ajax({
                        url: form.attr("action"),
                        method: "POST",  // post
                        data: form.serialize(),
                        success: function (partialResult) {
                            $("#PartialViewModalBody").html(partialResult);
                            UpdateDynamicTable();
                        }
                    });
                    break;
                case "Delete":
                    $.ajax({
                        url: form.attr("action"),
                        method: "POST",  // post
                        data: form.serialize(),
                        success: function (partialResult) {
                            console.log("Case 'Deleted' triggered");
                            console.log(partialResult);
                            if (partialResult == "Delete Confirmed") {
                                $("#PartialViewModal").modal('hide');
                            } else {
                                $("#PartialViewModalBody").html(partialResult);
                            }
                            UpdateDynamicTable();
                        }
                    });
                    break;

                case "Edit":

                    $.ajax({
                        url: form.attr("action"),
                        method: "POST",  // post
                        data: form.serialize(),
                        success: function (partialResult) {
                            $("#PartialViewModalBody").html(partialResult);
                            UpdateDynamicTable();
                        }
                    });
                    break;
                case "Details":
                    $("#PartialViewModal").modal('hide');
                    break;
                default:
                    break;
            }

        });
</script>




    @*Below is for the Create and Edit modals*@

    <script>
    $(".datepicker").datepicker({ dateFormat: 'dd/M/yy' });



</script>

@*Auto Completion Script*@
<script>
        $(function () {
            $.widget("custom.combobox", {

                _create: function () {
                    this.wrapper = $("<span>")
                      .addClass("custom-combobox")
                      .attr("id", "combobox" + this.element.attr("id"))
                      .insertAfter(this.element);


                    this.element.hide();
                    this._createAutocomplete();
                    this._createShowAllButton();
                    this.input.click(function (event) {
                        var currentValue = $(this).val();
                        if (currentValue == "") {
                            $(this).autocomplete('search', '');
                        } else $(this).autocomplete('search', $(this).val());
                    });
                },


                _createAutocomplete: function () {
                    var selected = this.element.children(":selected"),
                      value = selected.val() ? selected.text() : "";

                    this.input = $("<input>")
                      .appendTo(this.wrapper)
                      .val(value)
                      .attr("title", "")
                      .addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left form-control")
                      .autocomplete({
                          delay: 0,
                          minLength: 0,
                          source: $.proxy(this, "_source"),
                          select: function (event, ui) {
                              //alert($(this).closest('span').attr('id'));

                              //triggers the corresponding method on index change
                              DropDown_IndexChange($(this).closest('span').attr('id'));


                    },
                      })
                      .tooltip({
                          classes: {
                              "ui-tooltip": "ui-state-highlight"
                          }
                      });

                    this._on(this.input, {
                        autocompleteselect: function (event, ui) {
                            ui.item.option.selected = true;
                            this._trigger("select", event, {
                                item: ui.item.option
                            });
                        },

                        autocompletechange: "_removeIfInvalid"
                    });
                },

                _createShowAllButton: function () {
                    var input = this.input,
                      wasOpen = false;

                    $("<a>")
                      .attr("tabIndex", -1)
                      .attr("title", "Show All Items")
                      .tooltip()
                      .appendTo(this.wrapper)
                      .button({
                          icons: {
                              primary: "ui-icon-triangle-1-s"
                          },
                          text: false
                      })
                      .removeClass("ui-corner-all")
                      .addClass("custom-combobox-toggle ui-corner-right")
                      .on("mousedown", function () {
                          wasOpen = input.autocomplete("widget").is(":visible");
                      })
                      .on("click", function () {
                          input.trigger("focus");

                          // Close if already visible
                          if (wasOpen) {
                              return;
                          }

                          // Pass empty string as value to search for, displaying all results
                          input.autocomplete("search", "");
                      });
                },

                _source: function (request, response) {
                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                    response(this.element.children("option").map(function () {
                        var text = $(this).text();
                        if (this.value == request.term && this.value != "") {

                            return {
                                label: text,
                                value: text,
                                option: this,
                                select: true


                            };
                        }


                        if (this.value && (!request.term || matcher.test(text)))
                            return {
                                label: text,
                                value: text,
                                option: this
                            };
                    }));
                },

                _removeIfInvalid: function (event, ui) {

                    // Selected an item, nothing to do
                    if (ui.item) {
                        return;
                    }

                    // Search for a match (case-insensitive)
                    var value = this.input.val(),
                      valueLowerCase = value.toLowerCase(),
                      valid = false;
                    this.element.children("option").each(function () {
                        if ($(this).text().toLowerCase() === valueLowerCase) {
                            this.selected = valid = true;
                            return false;
                        }
                    });

                    // Found a match, nothing to do
                    if (valid) {
                        return;
                    }

                    // Remove invalid value
                    this.input
                      .val("")
                      .attr("title", value + " didn't match any item")
                      .tooltip("open");
                    this.element.val("");
                    this._delay(function () {
                        this.input.tooltip("close").attr("title", "");
                    }, 2500);
                    this.input.autocomplete("instance").term = "";

                    return;
                },

                _destroy: function () {
                    this.wrapper.remove();
                    this.element.show();
                },

            });

            $(".selectpicker").combobox();
        });





</script>

@*Ajax and Json Handling for the dynamic dropdown interaction*@
<script>
        $("custom-combobox-input").select();

        function DropDown_IndexChange(id) {
            if (id != null) {
                id = id.replace("combobox", "");
                var key = $("#" + id + " option:selected").val();
                var target = $("");
                //Based on the calling Id, we need to identify the dropdownlist in need of change:
                if (id == "FK_UserId")  {target = $("#FK_OrderId")  }
                if (id == "FK_OrderId") {target = $("#FK_ProjectId")}


            } else {return}



            function populateDropDownList(result, target) {
                //empty the targeted dropdownlist
                target.empty();
                //add the found results
                $.each(result, function (index, value) {
                    target.append($('<option/>', {
                        value: value.Value,
                        text: value.Text
                    }));
                    return;
                });
             }


            //Ajax Call is currently only needed When Chosing user or Order Number
            if (id == 'FK_UserId' || id == 'FK_OrderId') {
                $.getJSON('@Url.Action("AjaxDyanimcDropDown")', { dropDownKey: key, dropDownId: id }, function (result) {
                    if (result != null) {
                        populateDropDownList(result, target);
                    };
                });
            }

        };
</script>

}