@model IEnumerable<TimeReg.VI_OrderNumber>

<table class="table">
    <tr>
        <th>Order Number</th>
        <th>Title</th>
        @*
            Removed after OrderNumber merge
            <th>Requesting Organization</th>
            <th>Requester</th>
            <th>Customer Reference</th>*@
        <th></th>

    </tr>

@foreach (var item in Model)
{
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Number)
        </td>

        <td>
            @Html.DisplayFor(modelItem => item.Title)
        </td>

        @*
                
        Removed after OrderNumber Merge
        
        <td>
                @Html.DisplayFor(modelItem => item.Organization)
            </td>
            <td>
                @Html.DisplayFor(d => item.RequesterName)
            </td>
            <td>
                @Html.DisplayFor(d => item.CustomerRefName)
            </td>*@

        <td>
            @if (@item.PK_Id > 17)
            {
                <a href="javascript:void()" class="Edit" data-DynamicId="@item.PK_Id">Edit</a> <span> | </span>
                <a href="javascript:void()" class="Details" data-DynamicId="@item.PK_Id">Details</a> <span> | </span>
                <a href="javascript:void()" class="Delete" data-DynamicId="@item.PK_Id">Delete</a>

            }
            else
            {
                <a href="javascript:void()" class="Details" data-DynamicId="@item.PK_Id">Details</a>
            }
        </td>
    </tr>
}

</table>

@*
    This script handles everything around the tables, from sorting to generic search.
    It adds an input filtering and id value id="table" to an element with class="table"

    INTENDED FOR PAGES WITH 1 TABLE
*@
<script src="~/Scripts/tools/tableFilterAndSorting.js"></script>